{
  "address": "0x8E5fC69503cE78bb3980055E6AfFdF7A2192dF27",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum RewardLevels.Level",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "dust",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IKinetexRewards.Attributes",
          "name": "attributes",
          "type": "tuple"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetContractURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnPriveleged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum RewardLevels.Level",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "dust",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKinetexRewards.Attributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signatureManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dust",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dust",
          "type": "uint256"
        }
      ],
      "name": "safeMintPriveleged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "0e0f2a8d02c3d94c30cc275c820ee969",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum RewardLevels.Level\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IKinetexRewards.Attributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnPriveleged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"enum RewardLevels.Level\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"internalType\":\"struct IKinetexRewards.Attributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signatureManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dust\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dust\",\"type\":\"uint256\"}],\"name\":\"safeMintPriveleged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kinetex Team\",\"custom:security-contact\":\"semkin.eth@gmail.com*\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAttributes(uint256)\":{\"params\":{\"_tokenId\":\"token Id.\"}},\"getNextTokenId()\":{\"details\":\"Can be used to retrieve total supply.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"details\":\"Proxy initializer\",\"params\":{\"signatureManager\":\"SignatureManager deployed instance\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lock()\":{\"details\":\"EIP5192\"},\"locked(uint256)\":{\"details\":\"EIP 5192\",\"params\":{\"tokenId\":\"token Id.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Needs to be granted MANAGER role on SignatureManager instance\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"EIP5192, EIP712\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"EIP5192, EIP712\"},\"unlock()\":{\"details\":\"EIP5192\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Kinetex Rewards\",\"version\":1},\"userdoc\":{\"events\":{\"Locked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to locked.\"},\"Unlocked(uint256)\":{\"notice\":\"Emitted when the locking status is changed to unlocked.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Token burn. Refer to IKinetexRewards.sol\"},\"burnPriveleged(uint256)\":{\"notice\":\"Token burn that doesn't require approval. Refer to IKinetexRewards.sol\"},\"contractURI()\":{\"notice\":\"Contract metadata\"},\"getAttributes(uint256)\":{\"notice\":\"Retrieves onchain metadata.\"},\"getNextTokenId()\":{\"notice\":\"Retrieves the tokenId for the next mint\"},\"initialize(address)\":{\"notice\":\"Initialize the contract and grant roles to the deployer\"},\"lock()\":{\"notice\":\"Makes the tokens soulbound (non-transferrable)\"},\"locked(uint256)\":{\"notice\":\"Determines whether the token is transferrable.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Mints a token if the signature is valid. Refer to IKinetexRewards.sol\"},\"safeMintPriveleged(address,uint256)\":{\"notice\":\"Mints a token if called by a priveled account. Refer to IKinetexRewards.sol\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Override for OpenZeppelin ERC721 safeTransferFrom()\"},\"setBaseURI(string)\":{\"notice\":\"Sets the baseURI. Refer to IKinetexRewards.sol\"},\"setContractURI(string)\":{\"notice\":\"Sets the contractURI. Refer to IKinetexRewards.sol\"},\"supportsInterface(bytes4)\":{\"notice\":\"EIP165\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Override for OpenZeppelin ERC721 transferFrom()\"},\"unlock()\":{\"notice\":\"Makes the tokens transferrable\"}},\"notice\":\"ERC721 Collection designed for crafting and staking capabilities.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/KinetexRewards.sol\":\"KinetexRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xac29c453f4cf43afe4c9599374b6e1ed493c18644d814554e8a5969aaa6f3486\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x03006ed332e7aab87b6aacc771da96e3854bfe1624e1741ede27392dd3df41cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/cryptography/ISignatureManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ISignatureManager {\\n    /**\\n     *  @notice               Determines if a user is eligible to spend dust.\\n     *  @param _to            The address that will receive the NFT.\\n     *  @param _attribute     Onchain attribute to verify.\\n     *  @param _nonce         Allows to make a new valid signature for the same values.\\n     *  @param _signature     Hash of solidityPack([\\\"address _to\\\", \\\"uint256 _attribute\\\", \\\"uint256 _nonce\\\"] signed by the issuer.\\n     *  @param _consumer      Consumer address\\n     */\\n    function verifySignature(\\n        address _to,\\n        uint256 _attribute,\\n        uint256 _nonce,\\n        bytes calldata _signature,\\n        address _consumer\\n    ) external view returns (bool);\\n\\n    /**\\n     *  @notice               Registeres a consumer\\n     *  @param _consumer      Consumer address\\n     *  @param _issuer        Issuer address\\n     */\\n    function registerConsumer(address _consumer, address _issuer) external;\\n\\n    /**\\n     *  @notice               Sets the signature as used.\\n     *  @param _signature     hash of solidityPack([\\\"address _to\\\", \\\"uint256 _dust\\\"] signed by the issuer.\\n     */\\n    function useSignature(bytes calldata _signature) external;\\n\\n    /**\\n     *  @notice               Allows the consumer contract to set the issuer\\n     *  @param _issuer        Signature provider EOA address\\n     */\\n    function setIssuer(address _issuer) external;\\n}\\n\",\"keccak256\":\"0xd6755d71f2ffde9dba9fce7a1beb7e9de31503addb1807ace8c2e586808a22c1\",\"license\":\"MIT\"},\"contracts/eip/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165 {\\n    /// @dev    This event emits when the metadata of a token is changed.\\n    ///         So that the third-party platforms such as NFT market could\\n    ///         timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev    This event emits when the metadata of a range of tokens is changed.\\n    ///         So that the third-party platforms such as NFT market could\\n    ///         timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xf02bb1f33b9c2cba023f4600fefea769ba65a4fce36a8acfecf616c76206bc4c\",\"license\":\"MIT\"},\"contracts/eip/IERC5192.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/// @title Minimal interface for soulbinding EIP-721 NFTs\\ninterface IERC5192 is IERC165 {\\n    /// @notice         Emitted when the locking status is changed to locked.\\n    /// @dev            If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId  The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice         Emitted when the locking status is changed to unlocked.\\n    /// @dev            If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId  The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice         Returns the locking status of an Soulbound Token\\n    /// @dev            SBTs assigned to zero address are considered invalid, and queries\\n    ///                 about them do throw.\\n    /// @param tokenId  The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xce1f9950321a5c3b7e972a9bd90ead1cc2fdb948f7e3102e4fcb8806c950bf17\",\"license\":\"MIT\"},\"contracts/libraries/RewardLevels.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RewardLevels {\\n    enum Level {\\n        DUST,\\n        GEM,\\n        CRYSTAL,\\n        LIGHTNING\\n    }\\n\\n    function _level(uint256 dust) internal pure returns (Level) {\\n        if (dust < 3000) {\\n            return Level.DUST;\\n        }\\n\\n        if (dust < 5000) {\\n            return Level.GEM;\\n        }\\n\\n        if (dust < 10000) {\\n            return Level.CRYSTAL;\\n        }\\n\\n        return Level.LIGHTNING;\\n    }\\n\\n    function _dustPercentage(Level level, uint256 months)\\n        internal\\n        pure\\n        returns (uint256 dustPercentage)\\n    {\\n        if (level == Level.DUST) {\\n            if (months >= 12) {\\n                return 100;\\n            }\\n            if (months >= 6) {\\n                return 60;\\n            }\\n            if (months >= 3) {\\n                return 30;\\n            }\\n            if (months >= 1) {\\n                return 10;\\n            }\\n\\n            return 0;\\n        }\\n\\n        if (level == Level.GEM) {\\n            if (months >= 10) {\\n                return 100;\\n            }\\n            if (months >= 6) {\\n                return 60;\\n            }\\n            if (months >= 3) {\\n                return 40;\\n            }\\n            if (months >= 1) {\\n                return 20;\\n            }\\n\\n            return 0;\\n        }\\n\\n        if (level == Level.CRYSTAL) {\\n            if (months >= 8) {\\n                return 100;\\n            }\\n            if (months >= 6) {\\n                return 70;\\n            }\\n            if (months >= 3) {\\n                return 50;\\n            }\\n            if (months >= 1) {\\n                return 30;\\n            }\\n\\n            return 0;\\n        }\\n\\n        if (months >= 6) {\\n            return 100;\\n        }\\n        if (months >= 5) {\\n            return 80;\\n        }\\n        if (months >= 3) {\\n            return 60;\\n        }\\n        if (months >= 1) {\\n            return 40;\\n        }\\n\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc9fef562fcd6d615b424c902ed97f6fd7323436081f5b4e8b20f6d74221d95c9\",\"license\":\"MIT\"},\"contracts/rewards/IKinetexRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {RewardLevels} from \\\"../libraries/RewardLevels.sol\\\";\\n\\ninterface IKinetexRewards {\\n    /// @dev Emitted when an NFT is minted.\\n    event Mint(uint256 tokenId, Attributes attributes);\\n\\n    /// @dev Emitted when an nft is burned.\\n    event Burn(uint256 tokenId);\\n\\n    /// @dev Emitted when the base_uri us updated.\\n    event SetBaseURI(string uri);\\n\\n    /// @dev Emitted when the contract_uri us updated.\\n    event SetContractURI(string uri);\\n\\n    /**\\n     *  @notice         Dust NFT Attributes.\\n     *  @param level    Pover level value for metadata.\\n     *  @param _dust    Number value for crafting and staking power.\\n     */\\n    struct Attributes {\\n        RewardLevels.Level level;\\n        uint256 dust;\\n    }\\n\\n    /**\\n     *  @notice Initializer.\\n     */\\n    function initialize(address issuer) external;\\n\\n    /**\\n     *  @notice               Mints an NFT, validating the issuer's signature.\\n     *  @param _to            The address that will receive the NFT.\\n     *  @param _dust          How much rewards are spent for the mint.\\n     *  @param _dust          Allows to provide a valid signature for the same values.\\n     *  @param _signature     hash of solidityPack([\\\"address _to\\\", \\\"uint256 _dust\\\"] signed by the issuer.\\n     */\\n    function safeMint(\\n        address _to,\\n        uint256 _dust,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    ) external;\\n\\n    /**\\n     *  @notice          Mints an NFT.\\n     *  @param _to       The address that will receive the NFT.\\n     *  @param _dust     How much rewards are spent for the mint.\\n     */\\n    function safeMintPriveleged(address _to, uint256 _dust) external;\\n\\n    /**\\n     *  @notice          Burns an NFT.\\n     *  @param _tokenId  token to burn.\\n     */\\n    function burn(uint256 _tokenId) external;\\n\\n    /**\\n     *  @notice          Access-control gated burn.\\n     *  @param _tokenId  token to burn.\\n     */\\n    function burnPriveleged(uint256 _tokenId) external;\\n\\n    /**\\n     *  @notice      Sets the metadata uri.\\n     *  @param _uri  Metadata base uri.\\n     */\\n    function setBaseURI(string calldata _uri) external;\\n\\n    /**\\n     *  @notice      Sets the contract uri.\\n     *  @param _uri  Contract uri.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /**\\n     *  @notice          Returns a token's Power.\\n     *  @param _tokenId  token to check.\\n     */\\n    function getAttributes(uint256 _tokenId) external view returns (Attributes memory);\\n\\n    /**\\n     *  @notice Returns the ID that will be assigned to the next minted NFT.\\n     */\\n    function getNextTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x95f4cd1f0de0a6b5cb01d9bc19ed7b470518ad195b03dcc6b0ea6912712109d0\",\"license\":\"MIT\"},\"contracts/rewards/KinetexRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ERC721BurnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport {IERC4906} from \\\"../eip/IERC4906.sol\\\";\\nimport {IERC5192} from \\\"../eip/IERC5192.sol\\\";\\n\\nimport {RewardLevels} from \\\"../libraries/RewardLevels.sol\\\";\\nimport {IKinetexRewards} from \\\"./IKinetexRewards.sol\\\";\\nimport {ISignatureManager} from \\\"../cryptography/ISignatureManager.sol\\\";\\n\\n/**\\n * @title                   Kinetex Rewards\\n * @author                  Kinetex Team\\n * @notice                  ERC721 Collection designed for crafting and staking capabilities.\\n * @custom:security-contact semkin.eth@gmail.com\\n **/\\ncontract KinetexRewards is\\n    IKinetexRewards,\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721BurnableUpgradeable,\\n    IERC4906,\\n    IERC5192,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(abi.encodePacked(\\\"MINTER_ROLE\\\"));\\n    bytes32 public constant BURNER_ROLE = keccak256(abi.encodePacked(\\\"BURNER_ROLE\\\"));\\n    string public baseURI;\\n    string public contractMetadataURI;\\n    bool public contractLocked;\\n\\n    address private _signatureManager;\\n\\n    mapping(uint256 => Attributes) internal _attributesByTokenId;\\n\\n    uint256[91] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyUnlocked() {\\n        require(!contractLocked, \\\"KR: Tokens are soulbound\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @notice                 Initialize the contract and grant roles to the deployer\\n     *  @dev                    Proxy initializer\\n     *  @param signatureManager SignatureManager deployed instance\\n     */\\n    function initialize(address signatureManager) public initializer {\\n        __ERC721_init(\\\"Kinetex Rewards\\\", \\\"KTXR\\\");\\n        __ERC721Burnable_init();\\n        __AccessControl_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n\\n        contractLocked = true;\\n        _signatureManager = signatureManager;\\n    }\\n\\n    /**\\n     *  @notice Mints a token if the signature is valid. Refer to IKinetexRewards.sol\\n     *  @dev    Needs to be granted MANAGER role on SignatureManager instance\\n     */\\n    function safeMint(\\n        address _to,\\n        uint256 _dust,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    ) external {\\n        ISignatureManager signatureManager = ISignatureManager(_signatureManager);\\n\\n        require(\\n            signatureManager.verifySignature(_to, _dust, _nonce, _signature, address(this)) == true,\\n            \\\"KR: Issuer signature mismatch\\\"\\n        );\\n\\n        signatureManager.useSignature(_signature);\\n\\n        _setAttributesAndMint(_to, _dust);\\n    }\\n\\n    /**\\n     *  @notice Mints a token if called by a priveled account. Refer to IKinetexRewards.sol\\n     */\\n    function safeMintPriveleged(address _to, uint256 _dust) external onlyRole(MINTER_ROLE) {\\n        _setAttributesAndMint(_to, _dust);\\n    }\\n\\n    /**\\n     *  @notice         Determines whether the token is transferrable.\\n     *  @dev            EIP 5192\\n     *  @param  tokenId token Id.\\n     */\\n    function locked(uint256 tokenId) external view returns (bool) {\\n        return (ownerOf(tokenId) != address(0) && contractLocked);\\n    }\\n\\n    /**\\n     *  @notice Token burn. Refer to IKinetexRewards.sol\\n     */\\n    function burn(uint256 _tokenId)\\n        public\\n        override(ERC721BurnableUpgradeable, IKinetexRewards)\\n        onlyUnlocked\\n    {\\n        delete _attributesByTokenId[_tokenId];\\n        super.burn(_tokenId);\\n        emit Burn(_tokenId);\\n    }\\n\\n    /**\\n     *  @notice Token burn that doesn't require approval. Refer to IKinetexRewards.sol\\n     */\\n    function burnPriveleged(uint256 _tokenId) external onlyRole(BURNER_ROLE) onlyUnlocked {\\n        delete _attributesByTokenId[_tokenId];\\n        _burn(_tokenId);\\n        emit Burn(_tokenId);\\n    }\\n\\n    /**\\n     *  @notice Makes the tokens soulbound (non-transferrable)\\n     *  @dev    EIP5192\\n     */\\n    function lock() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(!contractLocked, \\\"KR: contract already locked\\\");\\n        contractLocked = true;\\n        for (uint256 i; i < _tokenIdCounter.current(); i++) {\\n            emit Locked(i);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Makes the tokens transferrable\\n     *  @dev    EIP5192\\n     */\\n    function unlock() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(contractLocked, \\\"KR: contract already unlocked\\\");\\n        contractLocked = false;\\n        for (uint256 i; i < _tokenIdCounter.current(); i++) {\\n            emit Unlocked(i);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Override for OpenZeppelin ERC721 transferFrom()\\n     *  @dev    EIP5192, EIP712\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override onlyUnlocked {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     *  @notice Override for OpenZeppelin ERC721 safeTransferFrom()\\n     *  @dev    EIP5192, EIP712\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override onlyUnlocked {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     *  @notice Sets the baseURI. Refer to IKinetexRewards.sol\\n     */\\n    function setBaseURI(string calldata _uri) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        baseURI = _uri;\\n        emit BatchMetadataUpdate(0, _tokenIdCounter.current());\\n        emit SetBaseURI(_uri);\\n    }\\n\\n    /**\\n     *  @notice Sets the contractURI. Refer to IKinetexRewards.sol\\n     */\\n    function setContractURI(string calldata _uri) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        contractMetadataURI = _uri;\\n        emit SetContractURI(_uri);\\n    }\\n\\n    /**\\n     *  @notice         Retrieves onchain metadata.\\n     *  @param _tokenId token Id.\\n     */\\n    function getAttributes(uint256 _tokenId) external view returns (Attributes memory) {\\n        return _attributesByTokenId[_tokenId];\\n    }\\n\\n    /**\\n     *  @notice Retrieves the tokenId for the next mint\\n     *  @dev    Can be used to retrieve total supply.\\n     */\\n    function getNextTokenId() external view returns (uint256) {\\n        return _tokenIdCounter.current();\\n    }\\n\\n    /**\\n     *  @notice EIP165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     *  @notice Contract metadata\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return contractMetadataURI;\\n    }\\n\\n    /**\\n     *  @dev Updates onchain metadata and calls the _safeMint on ERC721.\\n     */\\n    function _setAttributesAndMint(address _to, uint256 _dust) internal {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        RewardLevels.Level level = RewardLevels._level(_dust);\\n\\n        _attributesByTokenId[tokenId] = Attributes(level, _dust);\\n\\n        _tokenIdCounter.increment();\\n        _safeMint(_to, tokenId);\\n\\n        emit Mint(tokenId, Attributes(level, _dust));\\n    }\\n\\n    /**\\n     *  @dev Override for baseURI upgradability\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     *  @dev UUPS proxy upgrade\\n     */\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {}\\n}\\n\",\"keccak256\":\"0x05b51b2c10c6c6dc72e7ff148311e278f15ef1adb82ac871dec3bfcb024cef41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000206565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a9565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001205760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001179190620001e9565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019160278362000122565b91506200019e8262000133565b604082019050919050565b60006020820190508181036000830152620001c48162000182565b9050919050565b600060ff82169050919050565b620001e381620001cb565b82525050565b6000602082019050620002006000830184620001d8565b92915050565b608051615e396200023e60003960008181610cba01528181610d4901528181610f9d0152818161102c01526110dc0152615e396000f3fe60806040526004361061023b5760003560e01c806370a082311161012e578063b88d4fde116100ab578063d547741f1161006f578063d547741f14610884578063e8a3d485146108ad578063e985e9c5146108d8578063f83d08ba14610915578063f991cbb01461092c5761023b565b8063b88d4fde1461079f578063c4d66de8146107c8578063c87b56dd146107f1578063caa0f92a1461082e578063d5391393146108595761023b565b806395d89b41116100f257806395d89b41146106cc578063a217fddf146106f7578063a22cb46514610722578063a69df4b51461074b578063b45a3c0e146107625761023b565b806370a08231146105d557806373e92784146106125780637feeea1b1461063d57806391d1485414610666578063938e3d7b146106a35761023b565b80633659cfe6116101bc57806352d1902d1161018057806352d1902d146104f057806355f804b31461051b5780635cfa9297146105445780636352211e1461056d5780636c0360eb146105aa5761023b565b80633659cfe61461041c57806342842e0e1461044557806342966c681461046e5780634378a6e3146104975780634f1ef286146104d45761023b565b8063248a9ca311610203578063248a9ca314610337578063282c51f3146103745780632f2ff15d1461039f578063324cb3cb146103c857806336568abe146103f35761023b565b806301ffc9a71461024057806306fdde031461027d578063081812fc146102a8578063095ea7b3146102e557806323b872dd1461030e575b600080fd5b34801561024c57600080fd5b5061026760048036038101906102629190613fcc565b610955565b6040516102749190614014565b60405180910390f35b34801561028957600080fd5b50610292610967565b60405161029f91906140c8565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca9190614120565b6109f9565b6040516102dc919061418e565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906141d5565b610a3f565b005b34801561031a57600080fd5b5061033560048036038101906103309190614215565b610b57565b005b34801561034357600080fd5b5061035e6004803603810190610359919061429e565b610bb8565b60405161036b91906142da565b60405180910390f35b34801561038057600080fd5b50610389610bd8565b60405161039691906142da565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c191906142f5565b610c00565b005b3480156103d457600080fd5b506103dd610c21565b6040516103ea9190614014565b60405180910390f35b3480156103ff57600080fd5b5061041a600480360381019061041591906142f5565b610c35565b005b34801561042857600080fd5b50610443600480360381019061043e9190614335565b610cb8565b005b34801561045157600080fd5b5061046c60048036038101906104679190614215565b610e41565b005b34801561047a57600080fd5b5061049560048036038101906104909190614120565b610e61565b005b3480156104a357600080fd5b506104be60048036038101906104b99190614120565b610f28565b6040516104cb9190614417565b60405180910390f35b6104ee60048036038101906104e99190614567565b610f9b565b005b3480156104fc57600080fd5b506105056110d8565b60405161051291906142da565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190614623565b611191565b005b34801561055057600080fd5b5061056b600480360381019061056691906146c6565b611233565b005b34801561057957600080fd5b50610594600480360381019061058f9190614120565b6113b3565b6040516105a1919061418e565b60405180910390f35b3480156105b657600080fd5b506105bf61143a565b6040516105cc91906140c8565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f79190614335565b6114c9565b604051610609919061475d565b60405180910390f35b34801561061e57600080fd5b50610627611581565b60405161063491906140c8565b60405180910390f35b34801561064957600080fd5b50610664600480360381019061065f91906141d5565b611610565b005b34801561067257600080fd5b5061068d600480360381019061068891906142f5565b61164d565b60405161069a9190614014565b60405180910390f35b3480156106af57600080fd5b506106ca60048036038101906106c59190614623565b6116b8565b005b3480156106d857600080fd5b506106e1611716565b6040516106ee91906140c8565b60405180910390f35b34801561070357600080fd5b5061070c6117a8565b60405161071991906142da565b60405180910390f35b34801561072e57600080fd5b50610749600480360381019061074491906147a4565b6117af565b005b34801561075757600080fd5b506107606117c5565b005b34801561076e57600080fd5b5061078960048036038101906107849190614120565b6118a1565b6040516107969190614014565b60405180910390f35b3480156107ab57600080fd5b506107c660048036038101906107c191906147e4565b6118fb565b005b3480156107d457600080fd5b506107ef60048036038101906107ea9190614335565b61195e565b005b3480156107fd57600080fd5b5061081860048036038101906108139190614120565b611be0565b60405161082591906140c8565b60405180910390f35b34801561083a57600080fd5b50610843611c48565b604051610850919061475d565b60405180910390f35b34801561086557600080fd5b5061086e611c5a565b60405161087b91906142da565b60405180910390f35b34801561089057600080fd5b506108ab60048036038101906108a691906142f5565b611c82565b005b3480156108b957600080fd5b506108c2611ca3565b6040516108cf91906140c8565b60405180910390f35b3480156108e457600080fd5b506108ff60048036038101906108fa9190614867565b611d36565b60405161090c9190614014565b60405180910390f35b34801561092157600080fd5b5061092a611dca565b005b34801561093857600080fd5b50610953600480360381019061094e9190614120565b611ea7565b005b600061096082611f9d565b9050919050565b606060658054610976906148d6565b80601f01602080910402602001604051908101604052809291908181526020018280546109a2906148d6565b80156109ef5780601f106109c4576101008083540402835291602001916109ef565b820191906000526020600020905b8154815290600101906020018083116109d257829003601f168201915b5050505050905090565b6000610a0482612017565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a4a826113b3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab29061497a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ada612062565b73ffffffffffffffffffffffffffffffffffffffff161480610b095750610b0881610b03612062565b611d36565b5b610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f90614a0c565b60405180910390fd5b610b52838361206a565b505050565b61016260009054906101000a900460ff1615610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90614a78565b60405180910390fd5b610bb3838383612123565b505050565b600060c96000838152602001908152602001600020600101549050919050565b604051602001610be790614aef565b6040516020818303038152906040528051906020012081565b610c0982610bb8565b610c1281612183565b610c1c8383612197565b505050565b61016260009054906101000a900460ff1681565b610c3d612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca190614b76565b60405180910390fd5b610cb48282612278565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90614c08565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d8661235a565b73ffffffffffffffffffffffffffffffffffffffff1614610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390614c9a565b60405180910390fd5b610de5816123b1565b610e3e81600067ffffffffffffffff811115610e0457610e0361443c565b5b6040519080825280601f01601f191660200182016040528015610e365781602001600182028036833780820191505090505b5060006123c2565b50565b610e5c838383604051806020016040528060008152506118fb565b505050565b61016260009054906101000a900460ff1615610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea990614a78565b60405180910390fd5b6101636000828152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090555050610eee8161253f565b7fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb81604051610f1d919061475d565b60405180910390a150565b610f30613e0b565b61016360008381526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff166003811115610f7457610f73614362565b5b6003811115610f8657610f85614362565b5b81526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102190614c08565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661106961235a565b73ffffffffffffffffffffffffffffffffffffffff16146110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b690614c9a565b60405180910390fd5b6110c8826123b1565b6110d4828260016123c2565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115f90614d2c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6000801b61119e81612183565b828261016091906111b0929190613e37565b507f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c60006111df61015f61259b565b6040516111ed929190614d91565b60405180910390a17f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa8383604051611226929190614de7565b60405180910390a1505050565b600061016260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158173ffffffffffffffffffffffffffffffffffffffff166392e0a3298888888888306040518763ffffffff1660e01b81526004016112a296959493929190614e49565b60206040518083038186803b1580156112ba57600080fd5b505afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f29190614eba565b151514611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90614f33565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663773c3fff84846040518363ffffffff1660e01b815260040161136f929190614f53565b600060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050506113ab86866125a9565b505050505050565b6000806113bf836126b7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890614fc3565b60405180910390fd5b80915050919050565b6101608054611448906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611474906148d6565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190615055565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610161805461158f906148d6565b80601f01602080910402602001604051908101604052809291908181526020018280546115bb906148d6565b80156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b505050505081565b60405160200161161f906150c1565b6040516020818303038152906040528051906020012061163e81612183565b61164883836125a9565b505050565b600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b6116c581612183565b828261016191906116d7929190613e37565b507f5ca9f750836b0b7efdace104f07b5c9f0df0650c0fd24f5163e99044ae36ea528383604051611709929190614de7565b60405180910390a1505050565b606060668054611725906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611751906148d6565b801561179e5780601f106117735761010080835404028352916020019161179e565b820191906000526020600020905b81548152906001019060200180831161178157829003601f168201915b5050505050905090565b6000801b81565b6117c16117ba612062565b83836126f4565b5050565b6000801b6117d281612183565b61016260009054906101000a900460ff16611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990615122565b60405180910390fd5b600061016260006101000a81548160ff02191690831515021790555060005b61184c61015f61259b565b81101561189d577ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184281604051611882919061475d565b60405180910390a1808061189590615171565b915050611841565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166118c3836113b3565b73ffffffffffffffffffffffffffffffffffffffff16141580156118f4575061016260009054906101000a900460ff165b9050919050565b61016260009054906101000a900460ff161561194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194390614a78565b60405180910390fd5b61195884848484612861565b50505050565b60008060019054906101000a900460ff1615905080801561198f5750600160008054906101000a900460ff1660ff16105b806119bc575061199e306128c3565b1580156119bb5750600160008054906101000a900460ff1660ff16145b5b6119fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f29061522c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a38576001600060016101000a81548160ff0219169083151502179055505b611aac6040518060400160405280600f81526020017f4b696e65746578205265776172647300000000000000000000000000000000008152506040518060400160405280600481526020017f4b545852000000000000000000000000000000000000000000000000000000008152506128e6565b611ab4612943565b611abc612994565b611ac96000801b33612197565b611af7604051602001611adb906150c1565b6040516020818303038152906040528051906020012033612197565b611b25604051602001611b0990614aef565b6040516020818303038152906040528051906020012033612197565b600161016260006101000a81548160ff0219169083151502179055508161016260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611bdc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611bd39190615294565b60405180910390a15b5050565b6060611beb82612017565b6000611bf56129e5565b90506000815111611c155760405180602001604052806000815250611c40565b80611c1f84612a78565b604051602001611c309291906152e0565b6040516020818303038152906040525b915050919050565b6000611c5561015f61259b565b905090565b604051602001611c69906150c1565b6040516020818303038152906040528051906020012081565b611c8b82610bb8565b611c9481612183565b611c9e8383612278565b505050565b60606101618054611cb3906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdf906148d6565b8015611d2c5780601f10611d0157610100808354040283529160200191611d2c565b820191906000526020600020905b815481529060010190602001808311611d0f57829003601f168201915b5050505050905090565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b611dd781612183565b61016260009054906101000a900460ff1615611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f90615350565b60405180910390fd5b600161016260006101000a81548160ff02191690831515021790555060005b611e5261015f61259b565b811015611ea3577f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a161181604051611e88919061475d565b60405180910390a18080611e9b90615171565b915050611e47565b5050565b604051602001611eb690614aef565b60405160208183030381529060405280519060200120611ed581612183565b61016260009054906101000a900460ff1615611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d90614a78565b60405180910390fd5b6101636000838152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090555050611f6282612b50565b7fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb82604051611f91919061475d565b60405180910390a15050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612010575061200f82612c9e565b5b9050919050565b61202081612d80565b61205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205690614fc3565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166120dd836113b3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61213461212e612062565b82612dc1565b612173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216a906153e2565b60405180910390fd5b61217e838383612e56565b505050565b6121948161218f612062565b613150565b50565b6121a1828261164d565b61227457600160c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612219612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612282828261164d565b1561235657600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506122fb612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006123887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6131d5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000801b6123be81612183565b5050565b6123ee7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6131df565b60000160009054906101000a900460ff16156124125761240d836131e9565b61253a565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245857600080fd5b505afa92505050801561248957506040513d601f19601f820116820180604052508101906124869190615417565b60015b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf906154b6565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490615548565b60405180910390fd5b506125398383836132a2565b5b505050565b61255061254a612062565b82612dc1565b61258f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612586906153e2565b60405180910390fd5b61259881612b50565b50565b600081600001549050919050565b60006125b661015f61259b565b905060006125c3836132ce565b905060405180604001604052808260038111156125e3576125e2614362565b5b815260200184815250610163600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600381111561262b5761262a614362565b5b02179055506020820151816001015590505061264861015f613313565b6126528483613329565b7f91b5055a948b220cc7661279d3247d8cc0ef1ca630ae94343a583bcea7049ab782604051806040016040528084600381111561269257612691614362565b5b8152602001868152506040516126a9929190615568565b60405180910390a150505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275a906155dd565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128549190614014565b60405180910390a3505050565b61287261286c612062565b83612dc1565b6128b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a8906153e2565b60405180910390fd5b6128bd84848484613347565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292c9061566f565b60405180910390fd5b61293f82826133a3565b5050565b600060019054906101000a900460ff16612992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129899061566f565b60405180910390fd5b565b600060019054906101000a900460ff166129e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129da9061566f565b60405180910390fd5b565b606061016080546129f5906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054612a21906148d6565b8015612a6e5780601f10612a4357610100808354040283529160200191612a6e565b820191906000526020600020905b815481529060010190602001808311612a5157829003601f168201915b5050505050905090565b606060006001612a8784613424565b01905060008167ffffffffffffffff811115612aa657612aa561443c565b5b6040519080825280601f01601f191660200182016040528015612ad85781602001600182028036833780820191505090505b509050600082602001820190505b600115612b45578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b2f57612b2e61568f565b5b0494506000851415612b4057612b45565b612ae6565b819350505050919050565b6000612b5b826113b3565b9050612b6b816000846001613577565b612b74826113b3565b90506069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c9a81600084600161357d565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612d6957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612d795750612d7882613583565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612da2836126b7565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080612dcd836113b3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612e0f5750612e0e8185611d36565b5b80612e4d57508373ffffffffffffffffffffffffffffffffffffffff16612e35846109f9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612e76826113b3565b73ffffffffffffffffffffffffffffffffffffffff1614612ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec390615730565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f33906157c2565b60405180910390fd5b612f498383836001613577565b8273ffffffffffffffffffffffffffffffffffffffff16612f69826113b3565b73ffffffffffffffffffffffffffffffffffffffff1614612fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb690615730565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461314b838383600161357d565b505050565b61315a828261164d565b6131d157613167816135ed565b6131758360001c602061361a565b60405160200161318692919061587a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c891906140c8565b60405180910390fd5b5050565b6000819050919050565b6000819050919050565b6131f2816128c3565b613231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322890615926565b60405180910390fd5b8061325e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6131d5565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6132ab83613856565b6000825111806132b85750805b156132c9576132c783836138a5565b505b505050565b6000610bb88210156132e3576000905061330e565b6113888210156132f6576001905061330e565b612710821015613309576002905061330e565b600390505b919050565b6001816000016000828254019250508190555050565b613343828260405180602001604052806000815250613989565b5050565b613352848484612e56565b61335e848484846139e4565b61339d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613394906159b8565b60405180910390fd5b50505050565b600060019054906101000a900460ff166133f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e99061566f565b60405180910390fd5b8160659080519060200190613408929190613ebd565b50806066908051906020019061341f929190613ebd565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613482577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816134785761347761568f565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106134bf576d04ee2d6d415b85acef810000000083816134b5576134b461568f565b5b0492506020810190505b662386f26fc1000083106134ee57662386f26fc1000083816134e4576134e361568f565b5b0492506010810190505b6305f5e1008310613517576305f5e100838161350d5761350c61568f565b5b0492506008810190505b612710831061353c5761271083816135325761353161568f565b5b0492506004810190505b6064831061355f57606483816135555761355461568f565b5b0492506002810190505b600a831061356e576001810190505b80915050919050565b50505050565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606136138273ffffffffffffffffffffffffffffffffffffffff16601460ff1661361a565b9050919050565b60606000600283600261362d91906159d8565b6136379190615a32565b67ffffffffffffffff8111156136505761364f61443c565b5b6040519080825280601f01601f1916602001820160405280156136825781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136ba576136b9615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061371e5761371d615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261375e91906159d8565b6137689190615a32565b90505b6001811115613808577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106137aa576137a9615a88565b5b1a60f81b8282815181106137c1576137c0615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061380190615ab7565b905061376b565b506000841461384c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384390615b2d565b60405180910390fd5b8091505092915050565b61385f816131e9565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606138b0836128c3565b6138ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138e690615bbf565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516139179190615c26565b600060405180830381855af49150503d8060008114613952576040519150601f19603f3d011682016040523d82523d6000602084013e613957565b606091505b509150915061397f8282604051806060016040528060278152602001615ddd60279139613b7b565b9250505092915050565b6139938383613b9d565b6139a060008484846139e4565b6139df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d6906159b8565b60405180910390fd5b505050565b6000613a058473ffffffffffffffffffffffffffffffffffffffff166128c3565b15613b6e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613a2e612062565b8786866040518563ffffffff1660e01b8152600401613a509493929190615c76565b602060405180830381600087803b158015613a6a57600080fd5b505af1925050508015613a9b57506040513d601f19601f82011682018060405250810190613a989190615cd7565b60015b613b1e573d8060008114613acb576040519150601f19603f3d011682016040523d82523d6000602084013e613ad0565b606091505b50600081511415613b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0d906159b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b73565b600190505b949350505050565b60608315613b8b57829050613b96565b613b958383613dbb565b5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c0490615d50565b60405180910390fd5b613c1681612d80565b15613c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4d90615dbc565b60405180910390fd5b613c64600083836001613577565b613c6d81612d80565b15613cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ca490615dbc565b60405180910390fd5b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613db760008383600161357d565b5050565b600082511115613dce5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e0291906140c8565b60405180910390fd5b604051806040016040528060006003811115613e2a57613e29614362565b5b8152602001600081525090565b828054613e43906148d6565b90600052602060002090601f016020900481019282613e655760008555613eac565b82601f10613e7e57803560ff1916838001178555613eac565b82800160010185558215613eac579182015b82811115613eab578235825591602001919060010190613e90565b5b509050613eb99190613f43565b5090565b828054613ec9906148d6565b90600052602060002090601f016020900481019282613eeb5760008555613f32565b82601f10613f0457805160ff1916838001178555613f32565b82800160010185558215613f32579182015b82811115613f31578251825591602001919060010190613f16565b5b509050613f3f9190613f43565b5090565b5b80821115613f5c576000816000905550600101613f44565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fa981613f74565b8114613fb457600080fd5b50565b600081359050613fc681613fa0565b92915050565b600060208284031215613fe257613fe1613f6a565b5b6000613ff084828501613fb7565b91505092915050565b60008115159050919050565b61400e81613ff9565b82525050565b60006020820190506140296000830184614005565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561406957808201518184015260208101905061404e565b83811115614078576000848401525b50505050565b6000601f19601f8301169050919050565b600061409a8261402f565b6140a4818561403a565b93506140b481856020860161404b565b6140bd8161407e565b840191505092915050565b600060208201905081810360008301526140e2818461408f565b905092915050565b6000819050919050565b6140fd816140ea565b811461410857600080fd5b50565b60008135905061411a816140f4565b92915050565b60006020828403121561413657614135613f6a565b5b60006141448482850161410b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006141788261414d565b9050919050565b6141888161416d565b82525050565b60006020820190506141a3600083018461417f565b92915050565b6141b28161416d565b81146141bd57600080fd5b50565b6000813590506141cf816141a9565b92915050565b600080604083850312156141ec576141eb613f6a565b5b60006141fa858286016141c0565b925050602061420b8582860161410b565b9150509250929050565b60008060006060848603121561422e5761422d613f6a565b5b600061423c868287016141c0565b935050602061424d868287016141c0565b925050604061425e8682870161410b565b9150509250925092565b6000819050919050565b61427b81614268565b811461428657600080fd5b50565b60008135905061429881614272565b92915050565b6000602082840312156142b4576142b3613f6a565b5b60006142c284828501614289565b91505092915050565b6142d481614268565b82525050565b60006020820190506142ef60008301846142cb565b92915050565b6000806040838503121561430c5761430b613f6a565b5b600061431a85828601614289565b925050602061432b858286016141c0565b9150509250929050565b60006020828403121561434b5761434a613f6a565b5b6000614359848285016141c0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106143a2576143a1614362565b5b50565b60008190506143b382614391565b919050565b60006143c3826143a5565b9050919050565b6143d3816143b8565b82525050565b6143e2816140ea565b82525050565b6040820160008201516143fe60008501826143ca565b50602082015161441160208501826143d9565b50505050565b600060408201905061442c60008301846143e8565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6144748261407e565b810181811067ffffffffffffffff821117156144935761449261443c565b5b80604052505050565b60006144a6613f60565b90506144b2828261446b565b919050565b600067ffffffffffffffff8211156144d2576144d161443c565b5b6144db8261407e565b9050602081019050919050565b82818337600083830152505050565b600061450a614505846144b7565b61449c565b90508281526020810184848401111561452657614525614437565b5b6145318482856144e8565b509392505050565b600082601f83011261454e5761454d614432565b5b813561455e8482602086016144f7565b91505092915050565b6000806040838503121561457e5761457d613f6a565b5b600061458c858286016141c0565b925050602083013567ffffffffffffffff8111156145ad576145ac613f6f565b5b6145b985828601614539565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126145e3576145e2614432565b5b8235905067ffffffffffffffff811115614600576145ff6145c3565b5b60208301915083600182028301111561461c5761461b6145c8565b5b9250929050565b6000806020838503121561463a57614639613f6a565b5b600083013567ffffffffffffffff81111561465857614657613f6f565b5b614664858286016145cd565b92509250509250929050565b60008083601f84011261468657614685614432565b5b8235905067ffffffffffffffff8111156146a3576146a26145c3565b5b6020830191508360018202830111156146bf576146be6145c8565b5b9250929050565b6000806000806000608086880312156146e2576146e1613f6a565b5b60006146f0888289016141c0565b95505060206147018882890161410b565b94505060406147128882890161410b565b935050606086013567ffffffffffffffff81111561473357614732613f6f565b5b61473f88828901614670565b92509250509295509295909350565b614757816140ea565b82525050565b6000602082019050614772600083018461474e565b92915050565b61478181613ff9565b811461478c57600080fd5b50565b60008135905061479e81614778565b92915050565b600080604083850312156147bb576147ba613f6a565b5b60006147c9858286016141c0565b92505060206147da8582860161478f565b9150509250929050565b600080600080608085870312156147fe576147fd613f6a565b5b600061480c878288016141c0565b945050602061481d878288016141c0565b935050604061482e8782880161410b565b925050606085013567ffffffffffffffff81111561484f5761484e613f6f565b5b61485b87828801614539565b91505092959194509250565b6000806040838503121561487e5761487d613f6a565b5b600061488c858286016141c0565b925050602061489d858286016141c0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806148ee57607f821691505b60208210811415614902576149016148a7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061496460218361403a565b915061496f82614908565b604082019050919050565b6000602082019050818103600083015261499381614957565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006149f6603d8361403a565b9150614a018261499a565b604082019050919050565b60006020820190508181036000830152614a25816149e9565b9050919050565b7f4b523a20546f6b656e732061726520736f756c626f756e640000000000000000600082015250565b6000614a6260188361403a565b9150614a6d82614a2c565b602082019050919050565b60006020820190508181036000830152614a9181614a55565b9050919050565b600081905092915050565b7f4255524e45525f524f4c45000000000000000000000000000000000000000000600082015250565b6000614ad9600b83614a98565b9150614ae482614aa3565b600b82019050919050565b6000614afa82614acc565b9150819050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614b60602f8361403a565b9150614b6b82614b04565b604082019050919050565b60006020820190508181036000830152614b8f81614b53565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614bf2602c8361403a565b9150614bfd82614b96565b604082019050919050565b60006020820190508181036000830152614c2181614be5565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614c84602c8361403a565b9150614c8f82614c28565b604082019050919050565b60006020820190508181036000830152614cb381614c77565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000614d1660388361403a565b9150614d2182614cba565b604082019050919050565b60006020820190508181036000830152614d4581614d09565b9050919050565b6000819050919050565b6000819050919050565b6000614d7b614d76614d7184614d4c565b614d56565b6140ea565b9050919050565b614d8b81614d60565b82525050565b6000604082019050614da66000830185614d82565b614db3602083018461474e565b9392505050565b6000614dc6838561403a565b9350614dd38385846144e8565b614ddc8361407e565b840190509392505050565b60006020820190508181036000830152614e02818486614dba565b90509392505050565b600082825260208201905092915050565b6000614e288385614e0b565b9350614e358385846144e8565b614e3e8361407e565b840190509392505050565b600060a082019050614e5e600083018961417f565b614e6b602083018861474e565b614e78604083018761474e565b8181036060830152614e8b818587614e1c565b9050614e9a608083018461417f565b979650505050505050565b600081519050614eb481614778565b92915050565b600060208284031215614ed057614ecf613f6a565b5b6000614ede84828501614ea5565b91505092915050565b7f4b523a20497373756572207369676e6174757265206d69736d61746368000000600082015250565b6000614f1d601d8361403a565b9150614f2882614ee7565b602082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b60006020820190508181036000830152614f6e818486614e1c565b90509392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000614fad60188361403a565b9150614fb882614f77565b602082019050919050565b60006020820190508181036000830152614fdc81614fa0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061503f60298361403a565b915061504a82614fe3565b604082019050919050565b6000602082019050818103600083015261506e81615032565b9050919050565b7f4d494e5445525f524f4c45000000000000000000000000000000000000000000600082015250565b60006150ab600b83614a98565b91506150b682615075565b600b82019050919050565b60006150cc8261509e565b9150819050919050565b7f4b523a20636f6e747261637420616c726561647920756e6c6f636b6564000000600082015250565b600061510c601d8361403a565b9150615117826150d6565b602082019050919050565b6000602082019050818103600083015261513b816150ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061517c826140ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156151af576151ae615142565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615216602e8361403a565b9150615221826151ba565b604082019050919050565b6000602082019050818103600083015261524581615209565b9050919050565b6000819050919050565b600060ff82169050919050565b600061527e6152796152748461524c565b614d56565b615256565b9050919050565b61528e81615263565b82525050565b60006020820190506152a96000830184615285565b92915050565b60006152ba8261402f565b6152c48185614a98565b93506152d481856020860161404b565b80840191505092915050565b60006152ec82856152af565b91506152f882846152af565b91508190509392505050565b7f4b523a20636f6e747261637420616c7265616479206c6f636b65640000000000600082015250565b600061533a601b8361403a565b915061534582615304565b602082019050919050565b600060208201905081810360008301526153698161532d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006153cc602d8361403a565b91506153d782615370565b604082019050919050565b600060208201905081810360008301526153fb816153bf565b9050919050565b60008151905061541181614272565b92915050565b60006020828403121561542d5761542c613f6a565b5b600061543b84828501615402565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006154a0602e8361403a565b91506154ab82615444565b604082019050919050565b600060208201905081810360008301526154cf81615493565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b600061553260298361403a565b915061553d826154d6565b604082019050919050565b6000602082019050818103600083015261556181615525565b9050919050565b600060608201905061557d600083018561474e565b61558a60208301846143e8565b9392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006155c760198361403a565b91506155d282615591565b602082019050919050565b600060208201905081810360008301526155f6816155ba565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615659602b8361403a565b9150615664826155fd565b604082019050919050565b600060208201905081810360008301526156888161564c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061571a60258361403a565b9150615725826156be565b604082019050919050565b600060208201905081810360008301526157498161570d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006157ac60248361403a565b91506157b782615750565b604082019050919050565b600060208201905081810360008301526157db8161579f565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615818601783614a98565b9150615823826157e2565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615864601183614a98565b915061586f8261582e565b601182019050919050565b60006158858261580b565b915061589182856152af565b915061589c82615857565b91506158a882846152af565b91508190509392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000615910602d8361403a565b915061591b826158b4565b604082019050919050565b6000602082019050818103600083015261593f81615903565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159a260328361403a565b91506159ad82615946565b604082019050919050565b600060208201905081810360008301526159d181615995565b9050919050565b60006159e3826140ea565b91506159ee836140ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615a2757615a26615142565b5b828202905092915050565b6000615a3d826140ea565b9150615a48836140ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a7d57615a7c615142565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000615ac2826140ea565b91506000821415615ad657615ad5615142565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615b1760208361403a565b9150615b2282615ae1565b602082019050919050565b60006020820190508181036000830152615b4681615b0a565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615ba960268361403a565b9150615bb482615b4d565b604082019050919050565b60006020820190508181036000830152615bd881615b9c565b9050919050565b600081519050919050565b600081905092915050565b6000615c0082615bdf565b615c0a8185615bea565b9350615c1a81856020860161404b565b80840191505092915050565b6000615c328284615bf5565b915081905092915050565b6000615c4882615bdf565b615c528185614e0b565b9350615c6281856020860161404b565b615c6b8161407e565b840191505092915050565b6000608082019050615c8b600083018761417f565b615c98602083018661417f565b615ca5604083018561474e565b8181036060830152615cb78184615c3d565b905095945050505050565b600081519050615cd181613fa0565b92915050565b600060208284031215615ced57615cec613f6a565b5b6000615cfb84828501615cc2565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615d3a60208361403a565b9150615d4582615d04565b602082019050919050565b60006020820190508181036000830152615d6981615d2d565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615da6601c8361403a565b9150615db182615d70565b602082019050919050565b60006020820190508181036000830152615dd581615d99565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d0cb39f9b50d96953ba32b2f145d9467b79a806518ab068dac893f3ce5ebb10664736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c806370a082311161012e578063b88d4fde116100ab578063d547741f1161006f578063d547741f14610884578063e8a3d485146108ad578063e985e9c5146108d8578063f83d08ba14610915578063f991cbb01461092c5761023b565b8063b88d4fde1461079f578063c4d66de8146107c8578063c87b56dd146107f1578063caa0f92a1461082e578063d5391393146108595761023b565b806395d89b41116100f257806395d89b41146106cc578063a217fddf146106f7578063a22cb46514610722578063a69df4b51461074b578063b45a3c0e146107625761023b565b806370a08231146105d557806373e92784146106125780637feeea1b1461063d57806391d1485414610666578063938e3d7b146106a35761023b565b80633659cfe6116101bc57806352d1902d1161018057806352d1902d146104f057806355f804b31461051b5780635cfa9297146105445780636352211e1461056d5780636c0360eb146105aa5761023b565b80633659cfe61461041c57806342842e0e1461044557806342966c681461046e5780634378a6e3146104975780634f1ef286146104d45761023b565b8063248a9ca311610203578063248a9ca314610337578063282c51f3146103745780632f2ff15d1461039f578063324cb3cb146103c857806336568abe146103f35761023b565b806301ffc9a71461024057806306fdde031461027d578063081812fc146102a8578063095ea7b3146102e557806323b872dd1461030e575b600080fd5b34801561024c57600080fd5b5061026760048036038101906102629190613fcc565b610955565b6040516102749190614014565b60405180910390f35b34801561028957600080fd5b50610292610967565b60405161029f91906140c8565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca9190614120565b6109f9565b6040516102dc919061418e565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906141d5565b610a3f565b005b34801561031a57600080fd5b5061033560048036038101906103309190614215565b610b57565b005b34801561034357600080fd5b5061035e6004803603810190610359919061429e565b610bb8565b60405161036b91906142da565b60405180910390f35b34801561038057600080fd5b50610389610bd8565b60405161039691906142da565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c191906142f5565b610c00565b005b3480156103d457600080fd5b506103dd610c21565b6040516103ea9190614014565b60405180910390f35b3480156103ff57600080fd5b5061041a600480360381019061041591906142f5565b610c35565b005b34801561042857600080fd5b50610443600480360381019061043e9190614335565b610cb8565b005b34801561045157600080fd5b5061046c60048036038101906104679190614215565b610e41565b005b34801561047a57600080fd5b5061049560048036038101906104909190614120565b610e61565b005b3480156104a357600080fd5b506104be60048036038101906104b99190614120565b610f28565b6040516104cb9190614417565b60405180910390f35b6104ee60048036038101906104e99190614567565b610f9b565b005b3480156104fc57600080fd5b506105056110d8565b60405161051291906142da565b60405180910390f35b34801561052757600080fd5b50610542600480360381019061053d9190614623565b611191565b005b34801561055057600080fd5b5061056b600480360381019061056691906146c6565b611233565b005b34801561057957600080fd5b50610594600480360381019061058f9190614120565b6113b3565b6040516105a1919061418e565b60405180910390f35b3480156105b657600080fd5b506105bf61143a565b6040516105cc91906140c8565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f79190614335565b6114c9565b604051610609919061475d565b60405180910390f35b34801561061e57600080fd5b50610627611581565b60405161063491906140c8565b60405180910390f35b34801561064957600080fd5b50610664600480360381019061065f91906141d5565b611610565b005b34801561067257600080fd5b5061068d600480360381019061068891906142f5565b61164d565b60405161069a9190614014565b60405180910390f35b3480156106af57600080fd5b506106ca60048036038101906106c59190614623565b6116b8565b005b3480156106d857600080fd5b506106e1611716565b6040516106ee91906140c8565b60405180910390f35b34801561070357600080fd5b5061070c6117a8565b60405161071991906142da565b60405180910390f35b34801561072e57600080fd5b50610749600480360381019061074491906147a4565b6117af565b005b34801561075757600080fd5b506107606117c5565b005b34801561076e57600080fd5b5061078960048036038101906107849190614120565b6118a1565b6040516107969190614014565b60405180910390f35b3480156107ab57600080fd5b506107c660048036038101906107c191906147e4565b6118fb565b005b3480156107d457600080fd5b506107ef60048036038101906107ea9190614335565b61195e565b005b3480156107fd57600080fd5b5061081860048036038101906108139190614120565b611be0565b60405161082591906140c8565b60405180910390f35b34801561083a57600080fd5b50610843611c48565b604051610850919061475d565b60405180910390f35b34801561086557600080fd5b5061086e611c5a565b60405161087b91906142da565b60405180910390f35b34801561089057600080fd5b506108ab60048036038101906108a691906142f5565b611c82565b005b3480156108b957600080fd5b506108c2611ca3565b6040516108cf91906140c8565b60405180910390f35b3480156108e457600080fd5b506108ff60048036038101906108fa9190614867565b611d36565b60405161090c9190614014565b60405180910390f35b34801561092157600080fd5b5061092a611dca565b005b34801561093857600080fd5b50610953600480360381019061094e9190614120565b611ea7565b005b600061096082611f9d565b9050919050565b606060658054610976906148d6565b80601f01602080910402602001604051908101604052809291908181526020018280546109a2906148d6565b80156109ef5780601f106109c4576101008083540402835291602001916109ef565b820191906000526020600020905b8154815290600101906020018083116109d257829003601f168201915b5050505050905090565b6000610a0482612017565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a4a826113b3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab29061497a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ada612062565b73ffffffffffffffffffffffffffffffffffffffff161480610b095750610b0881610b03612062565b611d36565b5b610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f90614a0c565b60405180910390fd5b610b52838361206a565b505050565b61016260009054906101000a900460ff1615610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f90614a78565b60405180910390fd5b610bb3838383612123565b505050565b600060c96000838152602001908152602001600020600101549050919050565b604051602001610be790614aef565b6040516020818303038152906040528051906020012081565b610c0982610bb8565b610c1281612183565b610c1c8383612197565b505050565b61016260009054906101000a900460ff1681565b610c3d612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca190614b76565b60405180910390fd5b610cb48282612278565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90614c08565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d8661235a565b73ffffffffffffffffffffffffffffffffffffffff1614610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390614c9a565b60405180910390fd5b610de5816123b1565b610e3e81600067ffffffffffffffff811115610e0457610e0361443c565b5b6040519080825280601f01601f191660200182016040528015610e365781602001600182028036833780820191505090505b5060006123c2565b50565b610e5c838383604051806020016040528060008152506118fb565b505050565b61016260009054906101000a900460ff1615610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea990614a78565b60405180910390fd5b6101636000828152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090555050610eee8161253f565b7fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb81604051610f1d919061475d565b60405180910390a150565b610f30613e0b565b61016360008381526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff166003811115610f7457610f73614362565b5b6003811115610f8657610f85614362565b5b81526020016001820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102190614c08565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661106961235a565b73ffffffffffffffffffffffffffffffffffffffff16146110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b690614c9a565b60405180910390fd5b6110c8826123b1565b6110d4828260016123c2565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115f90614d2c565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6000801b61119e81612183565b828261016091906111b0929190613e37565b507f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c60006111df61015f61259b565b6040516111ed929190614d91565b60405180910390a17f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa8383604051611226929190614de7565b60405180910390a1505050565b600061016260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158173ffffffffffffffffffffffffffffffffffffffff166392e0a3298888888888306040518763ffffffff1660e01b81526004016112a296959493929190614e49565b60206040518083038186803b1580156112ba57600080fd5b505afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f29190614eba565b151514611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132b90614f33565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663773c3fff84846040518363ffffffff1660e01b815260040161136f929190614f53565b600060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050506113ab86866125a9565b505050505050565b6000806113bf836126b7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890614fc3565b60405180910390fd5b80915050919050565b6101608054611448906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611474906148d6565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153190615055565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610161805461158f906148d6565b80601f01602080910402602001604051908101604052809291908181526020018280546115bb906148d6565b80156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b505050505081565b60405160200161161f906150c1565b6040516020818303038152906040528051906020012061163e81612183565b61164883836125a9565b505050565b600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b6116c581612183565b828261016191906116d7929190613e37565b507f5ca9f750836b0b7efdace104f07b5c9f0df0650c0fd24f5163e99044ae36ea528383604051611709929190614de7565b60405180910390a1505050565b606060668054611725906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611751906148d6565b801561179e5780601f106117735761010080835404028352916020019161179e565b820191906000526020600020905b81548152906001019060200180831161178157829003601f168201915b5050505050905090565b6000801b81565b6117c16117ba612062565b83836126f4565b5050565b6000801b6117d281612183565b61016260009054906101000a900460ff16611822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181990615122565b60405180910390fd5b600061016260006101000a81548160ff02191690831515021790555060005b61184c61015f61259b565b81101561189d577ff27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f184281604051611882919061475d565b60405180910390a1808061189590615171565b915050611841565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166118c3836113b3565b73ffffffffffffffffffffffffffffffffffffffff16141580156118f4575061016260009054906101000a900460ff165b9050919050565b61016260009054906101000a900460ff161561194c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194390614a78565b60405180910390fd5b61195884848484612861565b50505050565b60008060019054906101000a900460ff1615905080801561198f5750600160008054906101000a900460ff1660ff16105b806119bc575061199e306128c3565b1580156119bb5750600160008054906101000a900460ff1660ff16145b5b6119fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f29061522c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a38576001600060016101000a81548160ff0219169083151502179055505b611aac6040518060400160405280600f81526020017f4b696e65746578205265776172647300000000000000000000000000000000008152506040518060400160405280600481526020017f4b545852000000000000000000000000000000000000000000000000000000008152506128e6565b611ab4612943565b611abc612994565b611ac96000801b33612197565b611af7604051602001611adb906150c1565b6040516020818303038152906040528051906020012033612197565b611b25604051602001611b0990614aef565b6040516020818303038152906040528051906020012033612197565b600161016260006101000a81548160ff0219169083151502179055508161016260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611bdc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611bd39190615294565b60405180910390a15b5050565b6060611beb82612017565b6000611bf56129e5565b90506000815111611c155760405180602001604052806000815250611c40565b80611c1f84612a78565b604051602001611c309291906152e0565b6040516020818303038152906040525b915050919050565b6000611c5561015f61259b565b905090565b604051602001611c69906150c1565b6040516020818303038152906040528051906020012081565b611c8b82610bb8565b611c9481612183565b611c9e8383612278565b505050565b60606101618054611cb3906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdf906148d6565b8015611d2c5780601f10611d0157610100808354040283529160200191611d2c565b820191906000526020600020905b815481529060010190602001808311611d0f57829003601f168201915b5050505050905090565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b611dd781612183565b61016260009054906101000a900460ff1615611e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1f90615350565b60405180910390fd5b600161016260006101000a81548160ff02191690831515021790555060005b611e5261015f61259b565b811015611ea3577f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a161181604051611e88919061475d565b60405180910390a18080611e9b90615171565b915050611e47565b5050565b604051602001611eb690614aef565b60405160208183030381529060405280519060200120611ed581612183565b61016260009054906101000a900460ff1615611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d90614a78565b60405180910390fd5b6101636000838152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090555050611f6282612b50565b7fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb82604051611f91919061475d565b60405180910390a15050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612010575061200f82612c9e565b5b9050919050565b61202081612d80565b61205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205690614fc3565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166120dd836113b3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61213461212e612062565b82612dc1565b612173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216a906153e2565b60405180910390fd5b61217e838383612e56565b505050565b6121948161218f612062565b613150565b50565b6121a1828261164d565b61227457600160c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612219612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612282828261164d565b1561235657600060c9600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506122fb612062565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006123887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6131d5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000801b6123be81612183565b5050565b6123ee7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6131df565b60000160009054906101000a900460ff16156124125761240d836131e9565b61253a565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245857600080fd5b505afa92505050801561248957506040513d601f19601f820116820180604052508101906124869190615417565b60015b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf906154b6565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b811461252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490615548565b60405180910390fd5b506125398383836132a2565b5b505050565b61255061254a612062565b82612dc1565b61258f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612586906153e2565b60405180910390fd5b61259881612b50565b50565b600081600001549050919050565b60006125b661015f61259b565b905060006125c3836132ce565b905060405180604001604052808260038111156125e3576125e2614362565b5b815260200184815250610163600084815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600381111561262b5761262a614362565b5b02179055506020820151816001015590505061264861015f613313565b6126528483613329565b7f91b5055a948b220cc7661279d3247d8cc0ef1ca630ae94343a583bcea7049ab782604051806040016040528084600381111561269257612691614362565b5b8152602001868152506040516126a9929190615568565b60405180910390a150505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275a906155dd565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516128549190614014565b60405180910390a3505050565b61287261286c612062565b83612dc1565b6128b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a8906153e2565b60405180910390fd5b6128bd84848484613347565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292c9061566f565b60405180910390fd5b61293f82826133a3565b5050565b600060019054906101000a900460ff16612992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129899061566f565b60405180910390fd5b565b600060019054906101000a900460ff166129e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129da9061566f565b60405180910390fd5b565b606061016080546129f5906148d6565b80601f0160208091040260200160405190810160405280929190818152602001828054612a21906148d6565b8015612a6e5780601f10612a4357610100808354040283529160200191612a6e565b820191906000526020600020905b815481529060010190602001808311612a5157829003601f168201915b5050505050905090565b606060006001612a8784613424565b01905060008167ffffffffffffffff811115612aa657612aa561443c565b5b6040519080825280601f01601f191660200182016040528015612ad85781602001600182028036833780820191505090505b509050600082602001820190505b600115612b45578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b2f57612b2e61568f565b5b0494506000851415612b4057612b45565b612ae6565b819350505050919050565b6000612b5b826113b3565b9050612b6b816000846001613577565b612b74826113b3565b90506069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c9a81600084600161357d565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612d6957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612d795750612d7882613583565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612da2836126b7565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080612dcd836113b3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612e0f5750612e0e8185611d36565b5b80612e4d57508373ffffffffffffffffffffffffffffffffffffffff16612e35846109f9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612e76826113b3565b73ffffffffffffffffffffffffffffffffffffffff1614612ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec390615730565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f33906157c2565b60405180910390fd5b612f498383836001613577565b8273ffffffffffffffffffffffffffffffffffffffff16612f69826113b3565b73ffffffffffffffffffffffffffffffffffffffff1614612fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb690615730565b60405180910390fd5b6069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461314b838383600161357d565b505050565b61315a828261164d565b6131d157613167816135ed565b6131758360001c602061361a565b60405160200161318692919061587a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c891906140c8565b60405180910390fd5b5050565b6000819050919050565b6000819050919050565b6131f2816128c3565b613231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161322890615926565b60405180910390fd5b8061325e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6131d5565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6132ab83613856565b6000825111806132b85750805b156132c9576132c783836138a5565b505b505050565b6000610bb88210156132e3576000905061330e565b6113888210156132f6576001905061330e565b612710821015613309576002905061330e565b600390505b919050565b6001816000016000828254019250508190555050565b613343828260405180602001604052806000815250613989565b5050565b613352848484612e56565b61335e848484846139e4565b61339d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613394906159b8565b60405180910390fd5b50505050565b600060019054906101000a900460ff166133f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e99061566f565b60405180910390fd5b8160659080519060200190613408929190613ebd565b50806066908051906020019061341f929190613ebd565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613482577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816134785761347761568f565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106134bf576d04ee2d6d415b85acef810000000083816134b5576134b461568f565b5b0492506020810190505b662386f26fc1000083106134ee57662386f26fc1000083816134e4576134e361568f565b5b0492506010810190505b6305f5e1008310613517576305f5e100838161350d5761350c61568f565b5b0492506008810190505b612710831061353c5761271083816135325761353161568f565b5b0492506004810190505b6064831061355f57606483816135555761355461568f565b5b0492506002810190505b600a831061356e576001810190505b80915050919050565b50505050565b50505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606136138273ffffffffffffffffffffffffffffffffffffffff16601460ff1661361a565b9050919050565b60606000600283600261362d91906159d8565b6136379190615a32565b67ffffffffffffffff8111156136505761364f61443c565b5b6040519080825280601f01601f1916602001820160405280156136825781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106136ba576136b9615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061371e5761371d615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261375e91906159d8565b6137689190615a32565b90505b6001811115613808577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106137aa576137a9615a88565b5b1a60f81b8282815181106137c1576137c0615a88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061380190615ab7565b905061376b565b506000841461384c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384390615b2d565b60405180910390fd5b8091505092915050565b61385f816131e9565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606138b0836128c3565b6138ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138e690615bbf565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516139179190615c26565b600060405180830381855af49150503d8060008114613952576040519150601f19603f3d011682016040523d82523d6000602084013e613957565b606091505b509150915061397f8282604051806060016040528060278152602001615ddd60279139613b7b565b9250505092915050565b6139938383613b9d565b6139a060008484846139e4565b6139df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d6906159b8565b60405180910390fd5b505050565b6000613a058473ffffffffffffffffffffffffffffffffffffffff166128c3565b15613b6e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613a2e612062565b8786866040518563ffffffff1660e01b8152600401613a509493929190615c76565b602060405180830381600087803b158015613a6a57600080fd5b505af1925050508015613a9b57506040513d601f19601f82011682018060405250810190613a989190615cd7565b60015b613b1e573d8060008114613acb576040519150601f19603f3d011682016040523d82523d6000602084013e613ad0565b606091505b50600081511415613b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0d906159b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b73565b600190505b949350505050565b60608315613b8b57829050613b96565b613b958383613dbb565b5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c0490615d50565b60405180910390fd5b613c1681612d80565b15613c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4d90615dbc565b60405180910390fd5b613c64600083836001613577565b613c6d81612d80565b15613cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ca490615dbc565b60405180910390fd5b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613db760008383600161357d565b5050565b600082511115613dce5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e0291906140c8565b60405180910390fd5b604051806040016040528060006003811115613e2a57613e29614362565b5b8152602001600081525090565b828054613e43906148d6565b90600052602060002090601f016020900481019282613e655760008555613eac565b82601f10613e7e57803560ff1916838001178555613eac565b82800160010185558215613eac579182015b82811115613eab578235825591602001919060010190613e90565b5b509050613eb99190613f43565b5090565b828054613ec9906148d6565b90600052602060002090601f016020900481019282613eeb5760008555613f32565b82601f10613f0457805160ff1916838001178555613f32565b82800160010185558215613f32579182015b82811115613f31578251825591602001919060010190613f16565b5b509050613f3f9190613f43565b5090565b5b80821115613f5c576000816000905550600101613f44565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613fa981613f74565b8114613fb457600080fd5b50565b600081359050613fc681613fa0565b92915050565b600060208284031215613fe257613fe1613f6a565b5b6000613ff084828501613fb7565b91505092915050565b60008115159050919050565b61400e81613ff9565b82525050565b60006020820190506140296000830184614005565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561406957808201518184015260208101905061404e565b83811115614078576000848401525b50505050565b6000601f19601f8301169050919050565b600061409a8261402f565b6140a4818561403a565b93506140b481856020860161404b565b6140bd8161407e565b840191505092915050565b600060208201905081810360008301526140e2818461408f565b905092915050565b6000819050919050565b6140fd816140ea565b811461410857600080fd5b50565b60008135905061411a816140f4565b92915050565b60006020828403121561413657614135613f6a565b5b60006141448482850161410b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006141788261414d565b9050919050565b6141888161416d565b82525050565b60006020820190506141a3600083018461417f565b92915050565b6141b28161416d565b81146141bd57600080fd5b50565b6000813590506141cf816141a9565b92915050565b600080604083850312156141ec576141eb613f6a565b5b60006141fa858286016141c0565b925050602061420b8582860161410b565b9150509250929050565b60008060006060848603121561422e5761422d613f6a565b5b600061423c868287016141c0565b935050602061424d868287016141c0565b925050604061425e8682870161410b565b9150509250925092565b6000819050919050565b61427b81614268565b811461428657600080fd5b50565b60008135905061429881614272565b92915050565b6000602082840312156142b4576142b3613f6a565b5b60006142c284828501614289565b91505092915050565b6142d481614268565b82525050565b60006020820190506142ef60008301846142cb565b92915050565b6000806040838503121561430c5761430b613f6a565b5b600061431a85828601614289565b925050602061432b858286016141c0565b9150509250929050565b60006020828403121561434b5761434a613f6a565b5b6000614359848285016141c0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106143a2576143a1614362565b5b50565b60008190506143b382614391565b919050565b60006143c3826143a5565b9050919050565b6143d3816143b8565b82525050565b6143e2816140ea565b82525050565b6040820160008201516143fe60008501826143ca565b50602082015161441160208501826143d9565b50505050565b600060408201905061442c60008301846143e8565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6144748261407e565b810181811067ffffffffffffffff821117156144935761449261443c565b5b80604052505050565b60006144a6613f60565b90506144b2828261446b565b919050565b600067ffffffffffffffff8211156144d2576144d161443c565b5b6144db8261407e565b9050602081019050919050565b82818337600083830152505050565b600061450a614505846144b7565b61449c565b90508281526020810184848401111561452657614525614437565b5b6145318482856144e8565b509392505050565b600082601f83011261454e5761454d614432565b5b813561455e8482602086016144f7565b91505092915050565b6000806040838503121561457e5761457d613f6a565b5b600061458c858286016141c0565b925050602083013567ffffffffffffffff8111156145ad576145ac613f6f565b5b6145b985828601614539565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126145e3576145e2614432565b5b8235905067ffffffffffffffff811115614600576145ff6145c3565b5b60208301915083600182028301111561461c5761461b6145c8565b5b9250929050565b6000806020838503121561463a57614639613f6a565b5b600083013567ffffffffffffffff81111561465857614657613f6f565b5b614664858286016145cd565b92509250509250929050565b60008083601f84011261468657614685614432565b5b8235905067ffffffffffffffff8111156146a3576146a26145c3565b5b6020830191508360018202830111156146bf576146be6145c8565b5b9250929050565b6000806000806000608086880312156146e2576146e1613f6a565b5b60006146f0888289016141c0565b95505060206147018882890161410b565b94505060406147128882890161410b565b935050606086013567ffffffffffffffff81111561473357614732613f6f565b5b61473f88828901614670565b92509250509295509295909350565b614757816140ea565b82525050565b6000602082019050614772600083018461474e565b92915050565b61478181613ff9565b811461478c57600080fd5b50565b60008135905061479e81614778565b92915050565b600080604083850312156147bb576147ba613f6a565b5b60006147c9858286016141c0565b92505060206147da8582860161478f565b9150509250929050565b600080600080608085870312156147fe576147fd613f6a565b5b600061480c878288016141c0565b945050602061481d878288016141c0565b935050604061482e8782880161410b565b925050606085013567ffffffffffffffff81111561484f5761484e613f6f565b5b61485b87828801614539565b91505092959194509250565b6000806040838503121561487e5761487d613f6a565b5b600061488c858286016141c0565b925050602061489d858286016141c0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806148ee57607f821691505b60208210811415614902576149016148a7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061496460218361403a565b915061496f82614908565b604082019050919050565b6000602082019050818103600083015261499381614957565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006149f6603d8361403a565b9150614a018261499a565b604082019050919050565b60006020820190508181036000830152614a25816149e9565b9050919050565b7f4b523a20546f6b656e732061726520736f756c626f756e640000000000000000600082015250565b6000614a6260188361403a565b9150614a6d82614a2c565b602082019050919050565b60006020820190508181036000830152614a9181614a55565b9050919050565b600081905092915050565b7f4255524e45525f524f4c45000000000000000000000000000000000000000000600082015250565b6000614ad9600b83614a98565b9150614ae482614aa3565b600b82019050919050565b6000614afa82614acc565b9150819050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000614b60602f8361403a565b9150614b6b82614b04565b604082019050919050565b60006020820190508181036000830152614b8f81614b53565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614bf2602c8361403a565b9150614bfd82614b96565b604082019050919050565b60006020820190508181036000830152614c2181614be5565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614c84602c8361403a565b9150614c8f82614c28565b604082019050919050565b60006020820190508181036000830152614cb381614c77565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000614d1660388361403a565b9150614d2182614cba565b604082019050919050565b60006020820190508181036000830152614d4581614d09565b9050919050565b6000819050919050565b6000819050919050565b6000614d7b614d76614d7184614d4c565b614d56565b6140ea565b9050919050565b614d8b81614d60565b82525050565b6000604082019050614da66000830185614d82565b614db3602083018461474e565b9392505050565b6000614dc6838561403a565b9350614dd38385846144e8565b614ddc8361407e565b840190509392505050565b60006020820190508181036000830152614e02818486614dba565b90509392505050565b600082825260208201905092915050565b6000614e288385614e0b565b9350614e358385846144e8565b614e3e8361407e565b840190509392505050565b600060a082019050614e5e600083018961417f565b614e6b602083018861474e565b614e78604083018761474e565b8181036060830152614e8b818587614e1c565b9050614e9a608083018461417f565b979650505050505050565b600081519050614eb481614778565b92915050565b600060208284031215614ed057614ecf613f6a565b5b6000614ede84828501614ea5565b91505092915050565b7f4b523a20497373756572207369676e6174757265206d69736d61746368000000600082015250565b6000614f1d601d8361403a565b9150614f2882614ee7565b602082019050919050565b60006020820190508181036000830152614f4c81614f10565b9050919050565b60006020820190508181036000830152614f6e818486614e1c565b90509392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000614fad60188361403a565b9150614fb882614f77565b602082019050919050565b60006020820190508181036000830152614fdc81614fa0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061503f60298361403a565b915061504a82614fe3565b604082019050919050565b6000602082019050818103600083015261506e81615032565b9050919050565b7f4d494e5445525f524f4c45000000000000000000000000000000000000000000600082015250565b60006150ab600b83614a98565b91506150b682615075565b600b82019050919050565b60006150cc8261509e565b9150819050919050565b7f4b523a20636f6e747261637420616c726561647920756e6c6f636b6564000000600082015250565b600061510c601d8361403a565b9150615117826150d6565b602082019050919050565b6000602082019050818103600083015261513b816150ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061517c826140ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156151af576151ae615142565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615216602e8361403a565b9150615221826151ba565b604082019050919050565b6000602082019050818103600083015261524581615209565b9050919050565b6000819050919050565b600060ff82169050919050565b600061527e6152796152748461524c565b614d56565b615256565b9050919050565b61528e81615263565b82525050565b60006020820190506152a96000830184615285565b92915050565b60006152ba8261402f565b6152c48185614a98565b93506152d481856020860161404b565b80840191505092915050565b60006152ec82856152af565b91506152f882846152af565b91508190509392505050565b7f4b523a20636f6e747261637420616c7265616479206c6f636b65640000000000600082015250565b600061533a601b8361403a565b915061534582615304565b602082019050919050565b600060208201905081810360008301526153698161532d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006153cc602d8361403a565b91506153d782615370565b604082019050919050565b600060208201905081810360008301526153fb816153bf565b9050919050565b60008151905061541181614272565b92915050565b60006020828403121561542d5761542c613f6a565b5b600061543b84828501615402565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b60006154a0602e8361403a565b91506154ab82615444565b604082019050919050565b600060208201905081810360008301526154cf81615493565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b600061553260298361403a565b915061553d826154d6565b604082019050919050565b6000602082019050818103600083015261556181615525565b9050919050565b600060608201905061557d600083018561474e565b61558a60208301846143e8565b9392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006155c760198361403a565b91506155d282615591565b602082019050919050565b600060208201905081810360008301526155f6816155ba565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615659602b8361403a565b9150615664826155fd565b604082019050919050565b600060208201905081810360008301526156888161564c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061571a60258361403a565b9150615725826156be565b604082019050919050565b600060208201905081810360008301526157498161570d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006157ac60248361403a565b91506157b782615750565b604082019050919050565b600060208201905081810360008301526157db8161579f565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615818601783614a98565b9150615823826157e2565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615864601183614a98565b915061586f8261582e565b601182019050919050565b60006158858261580b565b915061589182856152af565b915061589c82615857565b91506158a882846152af565b91508190509392505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000615910602d8361403a565b915061591b826158b4565b604082019050919050565b6000602082019050818103600083015261593f81615903565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159a260328361403a565b91506159ad82615946565b604082019050919050565b600060208201905081810360008301526159d181615995565b9050919050565b60006159e3826140ea565b91506159ee836140ea565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615a2757615a26615142565b5b828202905092915050565b6000615a3d826140ea565b9150615a48836140ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615a7d57615a7c615142565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000615ac2826140ea565b91506000821415615ad657615ad5615142565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615b1760208361403a565b9150615b2282615ae1565b602082019050919050565b60006020820190508181036000830152615b4681615b0a565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615ba960268361403a565b9150615bb482615b4d565b604082019050919050565b60006020820190508181036000830152615bd881615b9c565b9050919050565b600081519050919050565b600081905092915050565b6000615c0082615bdf565b615c0a8185615bea565b9350615c1a81856020860161404b565b80840191505092915050565b6000615c328284615bf5565b915081905092915050565b6000615c4882615bdf565b615c528185614e0b565b9350615c6281856020860161404b565b615c6b8161407e565b840191505092915050565b6000608082019050615c8b600083018761417f565b615c98602083018661417f565b615ca5604083018561474e565b8181036060830152615cb78184615c3d565b905095945050505050565b600081519050615cd181613fa0565b92915050565b600060208284031215615ced57615cec613f6a565b5b6000615cfb84828501615cc2565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615d3a60208361403a565b9150615d4582615d04565b602082019050919050565b60006020820190508181036000830152615d6981615d2d565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615da6601c8361403a565b9150615db182615d70565b602082019050919050565b60006020820190508181036000830152615dd581615d99565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d0cb39f9b50d96953ba32b2f145d9467b79a806518ab068dac893f3ce5ebb10664736f6c63430008090033",
  "devdoc": {
    "author": "Kinetex Team",
    "custom:security-contact": "semkin.eth@gmail.com*",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAttributes(uint256)": {
        "params": {
          "_tokenId": "token Id."
        }
      },
      "getNextTokenId()": {
        "details": "Can be used to retrieve total supply."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address)": {
        "details": "Proxy initializer",
        "params": {
          "signatureManager": "SignatureManager deployed instance"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "lock()": {
        "details": "EIP5192"
      },
      "locked(uint256)": {
        "details": "EIP 5192",
        "params": {
          "tokenId": "token Id."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeMint(address,uint256,uint256,bytes)": {
        "details": "Needs to be granted MANAGER role on SignatureManager instance"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "EIP5192, EIP712"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "EIP5192, EIP712"
      },
      "unlock()": {
        "details": "EIP5192"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Kinetex Rewards",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(uint256)": {
        "notice": "Emitted when the locking status is changed to locked."
      },
      "Unlocked(uint256)": {
        "notice": "Emitted when the locking status is changed to unlocked."
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Token burn. Refer to IKinetexRewards.sol"
      },
      "burnPriveleged(uint256)": {
        "notice": "Token burn that doesn't require approval. Refer to IKinetexRewards.sol"
      },
      "contractURI()": {
        "notice": "Contract metadata"
      },
      "getAttributes(uint256)": {
        "notice": "Retrieves onchain metadata."
      },
      "getNextTokenId()": {
        "notice": "Retrieves the tokenId for the next mint"
      },
      "initialize(address)": {
        "notice": "Initialize the contract and grant roles to the deployer"
      },
      "lock()": {
        "notice": "Makes the tokens soulbound (non-transferrable)"
      },
      "locked(uint256)": {
        "notice": "Determines whether the token is transferrable."
      },
      "safeMint(address,uint256,uint256,bytes)": {
        "notice": "Mints a token if the signature is valid. Refer to IKinetexRewards.sol"
      },
      "safeMintPriveleged(address,uint256)": {
        "notice": "Mints a token if called by a priveled account. Refer to IKinetexRewards.sol"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Override for OpenZeppelin ERC721 safeTransferFrom()"
      },
      "setBaseURI(string)": {
        "notice": "Sets the baseURI. Refer to IKinetexRewards.sol"
      },
      "setContractURI(string)": {
        "notice": "Sets the contractURI. Refer to IKinetexRewards.sol"
      },
      "supportsInterface(bytes4)": {
        "notice": "EIP165"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Override for OpenZeppelin ERC721 transferFrom()"
      },
      "unlock()": {
        "notice": "Makes the tokens transferrable"
      }
    },
    "notice": "ERC721 Collection designed for crafting and staking capabilities.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 936,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 939,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2722,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3075,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1263,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1265,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1269,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1273,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1277,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1283,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2185,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2369,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 918,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1233,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6088,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "351",
        "type": "t_struct(Counter)2729_storage"
      },
      {
        "astId": 6106,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "baseURI",
        "offset": 0,
        "slot": "352",
        "type": "t_string_storage"
      },
      {
        "astId": 6108,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "contractMetadataURI",
        "offset": 0,
        "slot": "353",
        "type": "t_string_storage"
      },
      {
        "astId": 6110,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "contractLocked",
        "offset": 0,
        "slot": "354",
        "type": "t_bool"
      },
      {
        "astId": 6112,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_signatureManager",
        "offset": 1,
        "slot": "354",
        "type": "t_address"
      },
      {
        "astId": 6117,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "_attributesByTokenId",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint256,t_struct(Attributes)5972_storage)"
      },
      {
        "astId": 6121,
        "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "356",
        "type": "t_array(t_uint256)91_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)91_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[91]",
        "numberOfBytes": "2912"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Level)5753": {
        "encoding": "inplace",
        "label": "enum RewardLevels.Level",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Attributes)5972_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IKinetexRewards.Attributes)",
        "numberOfBytes": "32",
        "value": "t_struct(Attributes)5972_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attributes)5972_storage": {
        "encoding": "inplace",
        "label": "struct IKinetexRewards.Attributes",
        "members": [
          {
            "astId": 5969,
            "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Level)5753"
          },
          {
            "astId": 5971,
            "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
            "label": "dust",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2729_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2728,
            "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/rewards/KinetexRewards.sol:KinetexRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}